require 'acceptance/acceptance_helper'

feature 'Crud posts feature: ', %q{
  In order to make my website more interesting
  As an admin
  I want to be able to create, update and delete  blog posts
} do

  background :each do
    # Given I am an admin user
    @admin = AdminUser.make!
    # And I log in
    admin_login(@admin)
  end
  
  scenario 'creating a post' do
    text = %q{
      You love to read great works of literature, but sometimes you just can't settle on a book to read. 
      One great place to find free books to read online is with a list of the 20th century's greatest works of fiction!In 1998, 
      The Modern Library published its famous "100 Best" list, a collection of the crowning achievements of English language 
      fiction from the last century. This list was generated by a poll of more than 400,000 avid readers. Of the 100 "Best" books, 
      27 are free books to read online using a built-in reader, or are free to download for your iPad, Kindle, or Sony tablet. 
    }
    create_blog_post_with_text text
    # Then I should be on the edit page for this post
    page.should have_content('Edit this blog post')
    find(:xpath, "id('blog_post_title')").value.should == 'The Blog Post'
  end
  
  scenario 'Creating a blog post with a break tag to determine the amount of text to show on the frontend' do
    # And given I have created a blog_post with a break tag
    title = 'Excellent blog post'
    text =  "<p>You love to read great works of literature, but sometimes you just can't settle on a book to read.</p><p>Hello World!</p>
            <br/> This does not have to appear!"
    create_blog_post_with_text text, title
    # When I go to the blog page
    visit blog_path
    
    # Then I should see the posts content until a break tag is found
    within(:xpath, "//div[@class='show-post']//div[@class='blog-title']//h2//a[text()='#{title}']") do    
      find(:xpath, "..//..//..//div[@class='content']").text.should include("Hello World!")
      find(:xpath, "..//..//..//div[@class='content']").text.should include("You love to read great works of literature, but sometimes you just can't settle on a book to read.")
      find(:xpath, "..//..//..//div[@class='content']").text.should_not include('This does not have to appear!')
    end
  end
  
  scenario 'Creating a blog post with <featured> tags does not have to show this tags on the post page' do
    # Given I have an author called Milan Kundera
    @author = Author.make!(:name => 'Milan Kundera')
    # And I create a blog post of his , with a <featured> tag
    title = "The unbearable lightness of being"
    text = "Il n'existe aucun moyen de vérifier quelle décision est la bonne car il n'existe aucune comparaison. 
            Tout est vécu tout de suite pour la première fois et sans préparation. Comme si un acteur entrait en 
            scène sans avoir jamais répété. Mais que peut valoir la vie, si la première répétition de la vie est la vie même? 
            C'est ce qui fait que la vie ressemble toujours à une esquisse. Mais même \"esquisse\" n'est pas le mot juste,
            car <featured author_id='#{@author.id}'>une esquisse est toujours l'ébauche de quelque chose, la préparation d'un tableau, tandis que 
            l'esquisse qu'est notre vie est une esquisse de rien, une ébauche sans tableau.</featured>"
    create_blog_post_with_text text, title
    # When I visit the post's page
    @post = BlogPost.last
    visit seo_path(@post)
    # Then I should not see this featured tags as text
    page.should_not have_content('</featured>')
  end
  
  
  scenario 'Creating a blog post with <featured> tags does have to show the quoted text in the author page' do
    # Given I have an author called Milan Kundera:
    @author = Author.where(:name => 'Milan Kundera').first # steak does not truncate the db between scenarios :(
    # And I create  a blog post  , with a <featured> tag of his quotes
    title = "La lenteur"
    text = "Il y a un lien secret entre la lenteur et la mémoire, entre la vitesse et l’oubli. <featured author_id='#{@author.id}'>Evoquons une situation on ne peut
            plus banale</featured> : un homme marche dans la rue. Soudain, il veut se rappeler quelque chose, mais le souvenir lui échappe.</featured>
            A ce moment, machinalement, il ralentit son pas. Par contre, quelqu’un essaie d’oublier un incident pénible qu’il
            vient de vivre accélère à son insu l’allure de sa marche comme s’il voulait vite s’éloigner de ce qui se trouve, 
            dans le temps, encore trop proche de lui."
    create_blog_post_with_text text, title
    # When I visit the author's page
    visit seo_path(@author.cached_slug)
    
    within('.author-quotations') do
      # Then I should have a link with the quote as text
      page.should have_content('Evoquons une situation on ne peut plus banale')
      # and that should redirect to the blogs post
      collection_slug(find('h5:last a')[:href]).should  == 'la-lenteur' # I used last because the db does not get truncated. So
                                                                        # the unbearable lightness ... quote is present.
    end
  end
  
  scenario 'Creating a blog post with <featured> tags does have to show the quoted text in the author collection page' do
    # Given I have an author called Milan Kundera:
    @author = Author.where(:name => 'Milan Kundera').first # steak does not truncate the db between scenarios :(
    @collection = Collection.make!(:name => 'Milan Kundera')
    @seo_slug = SeoSlug.make!(:seoable_id => @collection.id, :slug => @collection.cached_slug, :format => "all")
    # And I create  a blog post  , with a <featured> tag of his quotes
    title = "La lenteur-2"
    text = "Il y a un lien secret entre la lenteur et la mémoire, entre la vitesse et l’oubli. Evoquons une situation on ne peut
            plus banale : un homme marche dans la rue. Soudain, <featured author_id='#{@author.id}'>il veut se rappeler quelque chose, mais le souvenir lui échappe.</featured>
            A ce moment, machinalement, il ralentit son pas. Par contre, quelqu’un essaie d’oublier un incident pénible qu’il
            vient de vivre accélère à son insu l’allure de sa marche comme s’il voulait vite s’éloigner de ce qui se trouve, 
            dans le temps, encore trop proche de lui."
    create_blog_post_with_text text, title
    # When I visit the author's page
    visit seo_path(@author.cached_slug)
    page.should have_content('il veut se rappeler quelque chose, mais le souvenir lui échappe')
  end
  
  scenario 'Removing a <featured> tag from a blog post' do
    @author = Author.where(:name => 'Milan Kundera').first # steak does not truncate the db between scenarios :(
    # Given I am on the blog post admin
    visit admin_blog_posts_path
    # When  I edit the blog post with title 'La lenteur'
    within(:xpath, "//table//tbody") do
      click_on "La lenteur"
    end
    # and I remove the tagged quote
    text = "Il y a un lien secret entre la lenteur et la mémoire, entre la vitesse et l’oubli. Evoquons une situation on ne peut
            plus banale : un homme marche dans la rue. Soudain, il veut se rappeler quelque chose, mais le souvenir lui échappe.
            A ce moment, machinalement, il ralentit son pas. Par contre, quelqu’un essaie d’oublier un incident pénible qu’il
            vient de vivre accélère à son insu l’allure de sa marche comme s’il voulait vite s’éloigner de ce qui se trouve, 
            dans le temps, encore trop proche de lui."
    fill_in 'blog_post_content', :with => text
    click_on 'blog_post_submit'
    # And I visit the author's page
    visit seo_path(@author.cached_slug)
    # Then I should not see the removed quoting text
    page.should_not have_content('Evoquons une situation on ne peut plus banale') 
  end
end
